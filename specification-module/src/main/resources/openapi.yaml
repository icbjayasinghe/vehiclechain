openapi: 3.0.3

info:
  title: Vehicle Chain - Vehicle Details
  description: "Vehicle Chain - Vehicle Details!"
  termsOfService: http://swagger.io/terms/
  contact:
    email: icbjayasinghe@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
servers:
  - url: 'https://reflectoring.swagger.io/v2'
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our user
      url: http://swagger.io
  - name: vehicle
    description: Operations about vehicles
    externalDocs:
      description: Find out more about our vehicle
      url: http://swagger.io
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create user functionality
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
      x-codegen-request-body-name: body
  /user/{email}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        404:
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: email that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        201:
          description: operation successful
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}

  /vehicle:
    post:
      tags:
        - vehicle
      summary: Create vehicle
      description: Create vehicle functionality
      operationId: createVehicle
      requestBody:
        description: Created vehicle object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VehicleDto'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDto'
      x-codegen-request-body-name: body
  /vehicle/{vin}:
    get:
      tags:
        - vehicle
      summary: Get vehicle by vin
      operationId: getVehicleByVin
      parameters:
        - name: vin
          in: path
          description: 'The vin that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDto'
        404:
          description: Vehicle not found
          content: {}
    put:
      tags:
        - vehicle
      summary: Updated vehicle
      description: This can only be done by the logged in user.
      operationId: updateVehicle
      parameters:
        - name: vin
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated vehicle object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VehicleDto'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDto'
        400:
          description: Invalid vehicle supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete vehicle
      description: This can only be done by the logged in user.
      operationId: deleteVehicle
      parameters:
        - name: vin
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        201:
          description: operation successful
          content: {}
        400:
          description: Invalid vin supplied
          content: {}
        404:
          description: Vehicle not found
          content: {}

components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    VehicleDto:
      type: object
      properties:
        id:
          type: string
        vin:
          type: string
        cNumber:
          type: string
        vehicleNumber:
          type: string
        brand:
          type: string
          example: Toyota
        model:
          type: string
          example: Corolla
        type:
          type: string
          description: Vehicle Status
          example: approved
          enum:
            - car
            - van
            - suv/jeep
            - crew cab
            - pick-up/double-cab
            - bus
            - lorry/tipper
            - three wheel
            - tractor
            - heavy-duty
            - motorcycle
            - bicycle
            - other
        currentOwner:
          $ref: '#/components/schemas/UserDto'
        prevOwners:
          type: array
          xml:
            name: users
            wrapped: true
          items:
            $ref: '#/components/schemas/UserDto'
        status:
          type: string
          description: Vehicle Status
          example: approved
          enum:
            - unapproved
            - approved
            - deactive
  securitySchemes:
    reflectoring_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://reflectoring.swagger.io/oauth/dialog
          scopes:
            write:users: modify users
            read:users: read users
    api_key:
      type: apiKey
      name: api_key
      in: header