/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.vehiclechain.controller;

import com.skyhigh.vehiclechain.model.dto.VehicleDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-24T19:13:36.612862+05:30[Asia/Colombo]")
@Validated
@Tag(name = "vehicle", description = "Operations about vehicles")
public interface VehicleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /vehicle : Create vehicle
     * Create vehicle functionality
     *
     * @param body Created vehicle object (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "createVehicle",
        summary = "Create vehicle",
        tags = { "vehicle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vehicle",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleDto> createVehicle(
        @Parameter(name = "body", description = "Created vehicle object", required = true) @Valid @RequestBody VehicleDto body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"prevOwners\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" } ], \"currentOwner\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"vehicleNumber\" : \"vehicleNumber\", \"vin\" : \"vin\", \"cNumber\" : \"cNumber\", \"model\" : \"Corolla\", \"id\" : \"id\", \"type\" : \"approved\", \"brand\" : \"Toyota\", \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /vehicle/{vin} : Delete vehicle
     * This can only be done by the logged in user.
     *
     * @param vin The name that needs to be deleted (required)
     * @return operation successful (status code 201)
     *         or Invalid vin supplied (status code 400)
     *         or Vehicle not found (status code 404)
     */
    @Operation(
        operationId = "deleteVehicle",
        summary = "Delete vehicle",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "operation successful"),
            @ApiResponse(responseCode = "400", description = "Invalid vin supplied"),
            @ApiResponse(responseCode = "404", description = "Vehicle not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/vehicle/{vin}"
    )
    default ResponseEntity<Void> deleteVehicle(
        @Parameter(name = "vin", description = "The name that needs to be deleted", required = true) @PathVariable("vin") String vin
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vehicle/{vin} : Get vehicle by vin
     *
     * @param vin The vin that needs to be fetched. (required)
     * @return successful operation (status code 200)
     *         or Vehicle not found (status code 404)
     */
    @Operation(
        operationId = "getVehicleByVin",
        summary = "Get vehicle by vin",
        tags = { "vehicle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Vehicle not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vehicle/{vin}",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleDto> getVehicleByVin(
        @Parameter(name = "vin", description = "The vin that needs to be fetched.", required = true) @PathVariable("vin") String vin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"prevOwners\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" } ], \"currentOwner\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"vehicleNumber\" : \"vehicleNumber\", \"vin\" : \"vin\", \"cNumber\" : \"cNumber\", \"model\" : \"Corolla\", \"id\" : \"id\", \"type\" : \"approved\", \"brand\" : \"Toyota\", \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /vehicle/{vin} : Updated vehicle
     * This can only be done by the logged in user.
     *
     * @param vin name that need to be updated (required)
     * @param body Updated vehicle object (required)
     * @return successful operation (status code 200)
     *         or Invalid vehicle supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "updateVehicle",
        summary = "Updated vehicle",
        tags = { "vehicle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid vehicle supplied"),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/vehicle/{vin}",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleDto> updateVehicle(
        @Parameter(name = "vin", description = "name that need to be updated", required = true) @PathVariable("vin") String vin,
        @Parameter(name = "body", description = "Updated vehicle object", required = true) @Valid @RequestBody VehicleDto body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"prevOwners\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" } ], \"currentOwner\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"userStatus\" : 0, \"phone\" : \"phone\", \"id\" : \"id\", \"email\" : \"email\" }, \"vehicleNumber\" : \"vehicleNumber\", \"vin\" : \"vin\", \"cNumber\" : \"cNumber\", \"model\" : \"Corolla\", \"id\" : \"id\", \"type\" : \"approved\", \"brand\" : \"Toyota\", \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
